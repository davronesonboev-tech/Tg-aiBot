"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
"""

import os
from typing import Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()


class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞."""

    # Telegram Bot Token
    TELEGRAM_BOT_TOKEN: Optional[str] = os.getenv("TELEGRAM_BOT_TOKEN")

    # Google Gemini API Key
    GOOGLE_API_KEY: Optional[str] = os.getenv("GOOGLE_API_KEY")

    # –ú–æ–¥–µ–ª—å Gemini –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    GEMINI_MODEL: str = os.getenv("GEMINI_MODEL", "models/gemini-1.5-pro-002")

    # PostgreSQL Database URL
    DATABASE_URL: Optional[str] = os.getenv("DATABASE_URL")

    # –ê–¥–º–∏–Ω ID
    ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "1395804259"))

    # URL –¥–ª—è Gemini API
    GEMINI_BASE_URL: str = "https://generativelanguage.googleapis.com/v1"

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–≤ –±–∞–π—Ç–∞—Ö) - 20MB
    MAX_FILE_SIZE: int = 20 * 1024 * 1024

    # –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    REQUEST_TIMEOUT: int = 30
    WHISPER_TIMEOUT: int = 60

    @classmethod
    def validate_config(cls) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏–Ω–∞—á–µ False
        """
        required_vars = ["TELEGRAM_BOT_TOKEN", "GOOGLE_API_KEY", "DATABASE_URL"]
        missing_vars = []

        for var in required_vars:
            value = getattr(cls, var)
            if not value:
                missing_vars.append(var)

        if missing_vars:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            print("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

    @classmethod
    def get_gemini_url(cls, model: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API.

        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Gemini

        Returns:
            str: –ü–æ–ª–Ω—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        """
        return f"{cls.GEMINI_BASE_URL}/{model}:generateContent"


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()
