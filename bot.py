"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ —Å –ò–ò.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
"""

import asyncio
from typing import Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command

from config import config
from logger import log_info, log_error, log_warning
from gemini_client import gemini_client
from personas import persona_manager, PersonaType
from utils import calculator, translator, weather_service, game_service, fun_service
from memory import memory_manager
from keyboards import keyboard_manager
from database import get_db_manager


class AIBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ —Å –ò–ò."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞."""
        self.bot = Bot(
            token=config.TELEGRAM_BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()
        self.db = get_db_manager()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.dp.message.register(self.cmd_start, Command("start"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        self.dp.message.register(self.cmd_help, Command("help"))

        # –ö–æ–º–∞–Ω–¥—ã —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–æ–≤
        self.dp.message.register(self.cmd_friendly, Command("friendly"))
        self.dp.message.register(self.cmd_friendly, Command("–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π"))
        self.dp.message.register(self.cmd_programmer, Command("programmer"))
        self.dp.message.register(self.cmd_programmer, Command("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"))
        self.dp.message.register(self.cmd_programmer, Command("code"))
        self.dp.message.register(self.cmd_programmer, Command("–∫–æ–¥"))
        self.dp.message.register(self.cmd_expert, Command("expert"))
        self.dp.message.register(self.cmd_expert, Command("—ç–∫—Å–ø–µ—Ä—Ç"))
        self.dp.message.register(self.cmd_creative, Command("creative"))
        self.dp.message.register(self.cmd_creative, Command("–∫—Ä–µ–∞—Ç–∏–≤"))
        self.dp.message.register(self.cmd_creative, Command("–∏–¥–µ–∏"))
        self.dp.message.register(self.cmd_professional, Command("professional"))
        self.dp.message.register(self.cmd_professional, Command("–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"))
        self.dp.message.register(self.cmd_professional, Command("–±–∏–∑–Ω–µ—Å"))
        self.dp.message.register(self.cmd_current_mode, Command("mode"))
        self.dp.message.register(self.cmd_current_mode, Command("—Ä–µ–∂–∏–º"))

        # –ö–æ–º–∞–Ω–¥—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.dp.message.register(self.cmd_calculate, Command("calc"))
        self.dp.message.register(self.cmd_calculate, Command("–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
        self.dp.message.register(self.cmd_calculate, Command("calculate"))
        self.dp.message.register(self.cmd_game_rps, Command("rps"))
        self.dp.message.register(self.cmd_game_rps, Command("–∫–∞–º–µ–Ω—å"))
        self.dp.message.register(self.cmd_game_guess, Command("guess"))
        self.dp.message.register(self.cmd_game_guess, Command("—É–≥–∞–¥–∞–π"))
        self.dp.message.register(self.cmd_fun_fact, Command("fact"))
        self.dp.message.register(self.cmd_fun_fact, Command("—Ñ–∞–∫—Ç"))
        self.dp.message.register(self.cmd_fun_quote, Command("quote"))
        self.dp.message.register(self.cmd_fun_quote, Command("—Ü–∏—Ç–∞—Ç–∞"))
        self.dp.message.register(self.cmd_fun_joke, Command("joke"))
        self.dp.message.register(self.cmd_fun_joke, Command("—à—É—Ç–∫–∞"))

        # –ù–æ–≤—ã–µ –∏–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
        self.dp.message.register(self.cmd_game_dice, Command("dice"))
        self.dp.message.register(self.cmd_game_dice, Command("–∫–æ—Å—Ç–∏"))
        self.dp.message.register(self.cmd_game_quiz, Command("quiz"))
        self.dp.message.register(self.cmd_game_quiz, Command("–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"))
        self.dp.message.register(self.cmd_magic_ball, Command("ball"))
        self.dp.message.register(self.cmd_magic_ball, Command("—à–∞—Ä"))
        self.dp.message.register(self.cmd_magic_ball, Command("–≤–æ–ª—à–µ–±–Ω—ã–π"))
        self.dp.message.register(self.cmd_memory_clear, Command("clear"))
        self.dp.message.register(self.cmd_memory_clear, Command("–æ—á–∏—Å—Ç–∏—Ç—å"))
        self.dp.message.register(self.cmd_memory_stats, Command("stats"))
        self.dp.message.register(self.cmd_memory_stats, Command("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –º–µ–Ω—é
        self.dp.message.register(self.show_main_menu, Command("menu"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.handle_text_message, lambda msg: msg.text and not msg.text.startswith('/'))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.dp.message.register(self.handle_photo_message, lambda msg: msg.photo)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.handle_voice_message, lambda msg: msg.voice)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        self.dp.message.register(self.handle_audio_message, lambda msg: msg.audio)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.dp.callback_query.register(self.handle_callback)

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user_id = message.from_user.id
        log_info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start", user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        try:
            user_data = {
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'language_code': message.from_user.language_code,
                'is_premium': message.from_user.is_premium or False
            }
            self.db.get_or_create_user(user_id, **user_data)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

        current_persona = persona_manager.get_current_persona()
        is_admin = user_id == config.ADMIN_USER_ID

        welcome_text = (
            "ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π Javohir Zokirjonov</b>\n\n"
            f"üé≠ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current_persona.name}\n\n"
            "üöÄ <b>–ß—Ç–æ —É–º–µ—é:</b>\n"
            "üí¨ –†–∞–∑–≥–æ–≤–æ—Ä—ã —Å –ò–ò\n"
            "üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "üéµ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏\n"
            "üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n\n"
            "üéØ <b>–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ!</b>\n"
            "üßÆ <i>5+3*2</i>\n"
            "üåê <i>–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤ –≤ –º–µ–Ω—é</i>\n"
            "üß† <i>–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç</i>\n\n"
            "üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞</b>\n"
            "<i>–í –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ‚Üí –ü–æ–≥–æ–¥–∞</i>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.reply(
            welcome_text,
            reply_markup=keyboard_manager.get_main_menu(is_admin)
        )

    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        user_id = message.from_user.id
        log_info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help", user_id)

        current_persona = persona_manager.get_current_persona()
        available_commands = persona_manager.get_available_commands()

        help_text = (
            "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
            f"üé≠ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current_persona.name}\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç - –ø–æ–ª—É—á–∏—Ç–µ —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "üéµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏\n\n"
            "<b>üéØ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (–ü–†–û–°–¢–û –ü–ò–®–ò–¢–ï!):</b>\n"
            "üßÆ <i>2+2*5</i> - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
            "üåê <i>–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤ –≤ –º–µ–Ω—é</i> - –ø–µ—Ä–µ–≤–æ–¥\n"
            "üß† <i>–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç</i> - —Ñ–∞–∫—Ç—ã, —à—É—Ç–∫–∏, —Ü–∏—Ç–∞—Ç—ã\n\n"
            "<b>üå§Ô∏è –ü–æ–≥–æ–¥–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞:</b>\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ 12 –æ–±–ª–∞—Å—Ç–µ–π + –¢–∞—à–∫–µ–Ω—Ç\n\n"
            "<b>–ò–≥—Ä—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥:</b>\n"
            "üî¢ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —á–∏—Å–ª–∞ –≤ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'\n"
            "üß† –ü–∏—à–∏ –Ω–æ–º–µ—Ä–∞ –≤ '–í–∏–∫—Ç–æ—Ä–∏–Ω–µ'\n"
            "ü™® –ü–∏—à–∏ '–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'\n"
            "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã '–í–æ–ª—à–µ–±–Ω–æ–º—É —à–∞—Ä—É'\n\n"
            "<b>–†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è:</b>\n"
        )

        for cmd, desc in available_commands.items():
            help_text += f"{cmd} - {desc}\n"

        help_text += (
            "\n<b>–ö–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):</b>\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å\n\n"
            "üéØ <b>–ì–ª–∞–≤–Ω–æ–µ:</b> –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ!\n"
            "–ë–æ—Ç —Å–∞–º –ø–æ–π–º–µ—Ç —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ:\n"
            "‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Üí –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
            "‚Ä¢ –ü–æ–≥–æ–¥–∞ ‚Üí –ø—Ä–æ–≥–Ω–æ–∑\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ ‚Üí –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫\n"
            "‚Ä¢ –§–∞–∫—Ç/—à—É—Ç–∫–∞ ‚Üí —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n\n"
            "üöÄ <b>–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—â–µ–Ω–∏–µ–º!</b>\n\n"
            "ü§ñ <i>–°–æ–∑–¥–∞–Ω Javohir Zokirjonov</i>"
        )

        await message.reply(help_text)

    async def cmd_friendly(self, message: types.Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä–µ–∂–∏–º."""
        user_id = message.from_user.id
        if persona_manager.set_persona(PersonaType.FRIENDLY):
            current = persona_manager.get_current_persona()
            log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º: {current.name}", user_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–µ—Ä—Å–æ–Ω—É –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            memory_manager.update_user_persona(user_id, current.name)

            await message.reply(f"ü§ó –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º: <b>{current.name}</b>\n\n{current.description}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º")

    async def cmd_programmer(self, message: types.Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞."""
        user_id = message.from_user.id
        if persona_manager.set_persona(PersonaType.PROGRAMMER):
            current = persona_manager.get_current_persona()
            log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º: {current.name}", user_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–µ—Ä—Å–æ–Ω—É –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            memory_manager.update_user_persona(user_id, current.name)

            await message.reply(f"üíª –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º: <b>{current.name}</b>\n\n{current.description}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º")

    async def cmd_expert(self, message: types.Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º."""
        user_id = message.from_user.id
        if persona_manager.set_persona(PersonaType.EXPERT):
            current = persona_manager.get_current_persona()
            log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º: {current.name}", user_id)
            await message.reply(f"üéì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º: <b>{current.name}</b>\n\n{current.description}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º")

    async def cmd_creative(self, message: types.Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º."""
        user_id = message.from_user.id
        if persona_manager.set_persona(PersonaType.CREATIVE):
            current = persona_manager.get_current_persona()
            log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º: {current.name}", user_id)
            await message.reply(f"üé® –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º: <b>{current.name}</b>\n\n{current.description}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º")

    async def cmd_professional(self, message: types.Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º."""
        user_id = message.from_user.id
        if persona_manager.set_persona(PersonaType.PROFESSIONAL):
            current = persona_manager.get_current_persona()
            log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º: {current.name}", user_id)
            await message.reply(f"üíº –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º: <b>{current.name}</b>\n\n{current.description}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º")

    async def cmd_current_mode(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º."""
        user_id = message.from_user.id
        current = persona_manager.get_current_persona()
        log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current.name}", user_id)

        mode_text = (
            f"üé≠ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current.name}\n\n"
            f"üìù {current.description}\n\n"
            "üí° <i>–í—Å–µ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤ —Å—Ç–∏–ª–µ —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞!</i>"
        )
        await message.reply(mode_text)

    async def cmd_calculate(self, message: types.Message):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π."""
        user_id = message.from_user.id
        args = message.text.split(' ', 1)

        if len(args) < 2:
            await message.reply("üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n\n"
                              "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /calc <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ>\n"
                              "–ü—Ä–∏–º–µ—Ä—ã:\n"
                              "‚Ä¢ /calc 2 + 2\n"
                              "‚Ä¢ /calc 5 * (3 + 2)\n"
                              "‚Ä¢ /calc 10 / 3\n"
                              "‚Ä¢ /calc 2^8")
            return

        expression = args[1].strip()
        result = calculator.evaluate_expression(expression)

        if result is not None:
            await message.reply(f"üßÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n<code>{expression}</code> = <b>{result}</b>")
            log_info(f"–í—ã—á–∏—Å–ª–µ–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression} = {result}", user_id)
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
            log_error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {expression}", user_id)


    async def cmd_game_rps(self, message: types.Message):
        """–ò–≥—Ä–∞ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞."""
        user_id = message.from_user.id
        args = message.text.split(' ', 1)

        if len(args) < 2:
            await message.reply("ü™® <b>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞</b>\n\n"
                              "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rps <–≤—ã–±–æ—Ä>\n"
                              "–í–∞—Ä–∏–∞–Ω—Ç—ã: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞\n\n"
                              "–ü—Ä–∏–º–µ—Ä—ã:\n"
                              "‚Ä¢ /rps –∫–∞–º–µ–Ω—å\n"
                              "‚Ä¢ /–∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã\n"
                              "‚Ä¢ /rps –±—É–º–∞–≥–∞")
            return

        user_choice = args[1].strip().lower()
        result = game_service.play_rps(user_choice)

        await message.reply(result)
        log_info(f"–ò–≥—Ä–∞ –ö–ù–ë: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª {user_choice}", user_id)

    async def cmd_game_guess(self, message: types.Message):
        """–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ."""
        user_id = message.from_user.id
        args = message.text.split()

        if len(args) == 1:
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            message_text, target_number = game_service.guess_number_game()
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å target_number –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.reply(f"{message_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π: /guess <—á–∏—Å–ª–æ>")
            log_info("–ù–∞—á–∞—Ç–∞ –∏–≥—Ä–∞ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ", user_id)

        elif len(args) == 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            try:
                guess = int(args[1])
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                target_number = random.randint(1, 100)  # –ó–∞–≥–ª—É—à–∫–∞
                result = game_service.check_guess(guess, target_number)
                await message.reply(result)
                log_info(f"–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ: {guess}", user_id)
            except ValueError:
                await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        else:
            await message.reply("üéÆ <b>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b>\n\n"
                              "‚Ä¢ /guess - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                              "‚Ä¢ /guess <—á–∏—Å–ª–æ> - —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ")

    async def cmd_fun_fact(self, message: types.Message):
        """–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç."""
        user_id = message.from_user.id
        fact = fun_service.get_random_fact()
        await message.reply(fact)
        log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç", user_id)

    async def cmd_fun_quote(self, message: types.Message):
        """–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞."""
        user_id = message.from_user.id
        quote = fun_service.get_motivational_quote()
        await message.reply(quote)
        log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", user_id)

    async def cmd_fun_joke(self, message: types.Message):
        """–®—É—Ç–∫–∞."""
        user_id = message.from_user.id
        joke = fun_service.get_random_joke()
        await message.reply(joke)
        log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —à—É—Ç–∫–∞", user_id)

    async def cmd_game_dice(self, message: types.Message):
        """–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏."""
        user_id = message.from_user.id
        args = message.text.split()

        bet = 'medium'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if len(args) > 1:
            bet = args[1].lower()

        if bet not in ['low', 'medium', 'high', '–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π']:
            await message.reply("üé≤ <b>–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏</b>\n\n"
                              "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dice <—Å—Ç–∞–≤–∫–∞>\n"
                              "–°—Ç–∞–≤–∫–∏: low/–Ω–∏–∑–∫–∏–π, medium/—Å—Ä–µ–¥–Ω–∏–π, high/–≤—ã—Å–æ–∫–∏–π\n\n"
                              "–ü—Ä–∏–º–µ—Ä—ã:\n"
                              "‚Ä¢ /dice\n"
                              "‚Ä¢ /–∫–æ—Å—Ç–∏ —Å—Ä–µ–¥–Ω–∏–π\n"
                              "‚Ä¢ /dice high")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
        if bet == '–Ω–∏–∑–∫–∏–π':
            bet = 'low'
        elif bet == '—Å—Ä–µ–¥–Ω–∏–π':
            bet = 'medium'
        elif bet == '–≤—ã—Å–æ–∫–∏–π':
            bet = 'high'

        result = game_service.play_dice_game(bet)
        await message.reply(result)
        log_info(f"–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞–≤–∫–æ–π {bet}", user_id)

    async def cmd_game_quiz(self, message: types.Message):
        """–í–∏–∫—Ç–æ—Ä–∏–Ω–∞."""
        user_id = message.from_user.id

        question = game_service.get_random_question()
        await message.reply(question)
        log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã", user_id)

    async def cmd_magic_ball(self, message: types.Message):
        """–í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä."""
        user_id = message.from_user.id
        args = message.text.split(' ', 1)

        if len(args) < 2:
            await message.reply("üé± <b>–í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä</b>\n\n"
                              "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å: /ball <–≤–æ–ø—Ä–æ—Å>\n\n"
                              "–ü—Ä–∏–º–µ—Ä—ã:\n"
                              "‚Ä¢ /—à–∞—Ä –ë—É–¥–µ—Ç –ª–∏ –∑–∞–≤—Ç—Ä–∞ –¥–æ–∂–¥—å?\n"
                              "‚Ä¢ /ball –Ø —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º?\n"
                              "‚Ä¢ /–≤–æ–ª—à–µ–±–Ω—ã–π –ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è –∑–∞–≤—Ç—Ä–∞?")
            return

        question = args[1]
        answer = game_service.get_magic_ball_answer()

        await message.reply(f"‚ùì <b>–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å:</b> {question}\n\n{answer}")
        log_info(f"–û—Ç–≤–µ—Ç –≤–æ–ª—à–µ–±–Ω–æ–≥–æ —à–∞—Ä–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question[:50]}...", user_id)

    async def cmd_memory_clear(self, message: types.Message):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
        user_id = message.from_user.id

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from memory import memory_manager

        if memory_manager.clear_user_memory(user_id):
            await message.reply("üß† <b>–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
                              "–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞.\n"
                              "–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! ‚ú®")
            log_info("–û—á–∏—â–µ–Ω–∞ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user_id)
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")
            log_error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏", user_id)

    async def cmd_memory_stats(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
        user_id = message.from_user.id

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from memory import memory_manager

        stats = memory_manager.get_user_statistics(user_id)
        if stats:
            await message.reply(f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</b>\n\n"
                              f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
                              f"üóÇÔ∏è –¢–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['current_messages']}\n"
                              f"üìÖ –°–æ–∑–¥–∞–Ω: {stats['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                              f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(stats['conversation_duration'] / 3600)} —á {int((stats['conversation_duration'] % 3600) / 60)} –º–∏–Ω")
            log_info("–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", user_id)
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    async def handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
        user_id = callback.from_user.id
        callback_data = callback.data

        log_info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}", user_id)

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
            if callback_data == "menu_personas":
                new_text = "üé≠ <b>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:</b>\n\n–ö–∞–∂–¥—ã–π —Ä–µ–∂–∏–º –∏–º–µ–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é!"
                current_text = callback.message.text or ""
                current_markup = callback.message.reply_markup

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                if current_text != new_text or not self._is_same_markup(current_markup, keyboard_manager.get_personas_menu()):
                    await callback.message.edit_text(new_text, reply_markup=keyboard_manager.get_personas_menu())
                else:
                    await callback.answer("–ú–µ–Ω—é —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ")

            elif callback_data == "menu_games":
                new_text = "üéÆ <b>–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:</b>\n\n–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –¥–ª—è –≤–µ—Å–µ–ª–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è!"
                await self._safe_edit_message(callback, new_text, keyboard_manager.get_games_menu())

            elif callback_data == "menu_tools":
                new_text = "üõ†Ô∏è <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø–æ–º–æ—â–Ω–∏–∫–∏:</b>\n\n–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á!"
                await self._safe_edit_message(callback, new_text, keyboard_manager.get_tools_menu())

            elif callback_data == "back_to_main":
                current_persona = persona_manager.get_current_persona()
                welcome_text = (
                    "ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π Javohir Zokirjonov</b>\n\n"
                    f"üé≠ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current_persona.name}\n\n"
                    "üéÆ <b>–í—ã–±–µ—Ä–∏, —á–µ–º –∑–∞–π–º–µ–º—Å—è:</b>"
                )
                await self._safe_edit_message(callback, welcome_text, keyboard_manager.get_main_menu())

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω—ã
            elif callback_data.startswith("persona_"):
                persona_value = callback_data.split("_", 1)[1]
                persona_type = PersonaType(persona_value)

                if persona_manager.set_persona(persona_type):
                    current = persona_manager.get_current_persona()
                    memory_manager.update_user_persona(user_id, current.name)

                    success_text = (f"‚úÖ <b>–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                                  f"üé≠ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current.name}\n\n"
                                  f"üìù {current.description}\n\n"
                                  f"üí° –í—Å–µ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤ —Å—Ç–∏–ª–µ —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞!")
                    await self._safe_edit_message(callback, success_text, keyboard_manager.get_personas_menu())
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä
            elif callback_data == "game_rps":
                rps_text = "ü™® <b>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞</b>\n\nüéØ <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:</b>"
                await self._safe_edit_message(callback, rps_text, keyboard_manager.get_rps_choice_menu())

            elif callback_data.startswith("rps_"):
                user_choice = callback_data.split("_", 1)[1]
                result = game_service.play_rps(user_choice)

                result_text = f"üéÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:</b>\n\n{result}\n\nüéØ <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥:</b>"
                await self._safe_edit_message(callback, result_text, keyboard_manager.get_rps_choice_menu())

                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
                try:
                    self.db.log_message(user_id, "game_rps", content=user_choice, response=result)
                    self.db.update_user_stats(user_id, "total_rps_games")
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã –ö–ù–ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

            elif callback_data == "game_dice":
                new_text = "üé≤ <b>–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:"
                await self._safe_edit_message(callback, new_text, keyboard_manager.get_dice_bet_menu())

            elif callback_data.startswith("dice_"):
                bet = callback_data.split("_", 1)[1]

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —Ä—É—Å—Å–∫–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                bet_map = {"low": "low", "medium": "medium", "high": "high"}
                bet = bet_map.get(bet, bet)

                result = game_service.play_dice_game(bet)
                result_text = f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏:</b>\n\n{result}"
                await self._safe_edit_message(callback, result_text, keyboard_manager.get_games_menu())

            elif callback_data == "game_guess":
                new_text = "üî¢ <b>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b>\n\n–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:"
                await self._safe_edit_message(callback, new_text, keyboard_manager.get_guess_difficulty_menu())

            elif callback_data.startswith("guess_"):
                difficulty = callback_data.split("_", 1)[1]
                message_text, target_number = game_service.guess_number_game(difficulty)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                memory_manager.set_user_active_game(user_id, "guess_number", {
                    'target_number': target_number,
                    'difficulty': difficulty
                })

                result_text = f"üéÆ {message_text}\n\nüéØ <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ!</b> (–±–µ–∑ –∫–æ–º–∞–Ω–¥)"
                await self._safe_edit_message(callback, result_text, keyboard_manager.get_games_menu())

            elif callback_data == "game_quiz":
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —á–µ—Ä–µ–∑ Gemini AI
                quiz_data = game_service.generate_quiz_question()

                if quiz_data:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                    memory_manager.set_user_active_game(user_id, "quiz", {
                        'correct_answer': quiz_data['correct_answer'],
                        'hint': quiz_data['hint'],
                        'options': quiz_data['options'],
                        'question': quiz_data['question']
                    })

                    quiz_text = f"üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞:</b>\n\n‚ùì {quiz_data['question']}\n\nüéØ <b>–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>"
                    await self._safe_edit_message(callback, quiz_text, keyboard_manager.get_quiz_answers_menu(quiz_data['options']))
                else:
                    # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI
                    correct_answer = "1"
                    memory_manager.set_user_active_game(user_id, "quiz", {
                        'correct_answer': correct_answer
                    })

                    question = game_service.get_random_question()
                    quiz_text = f"üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞:</b>\n\n{question}\n\nüéØ <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞!</b> (1-4)"
                    await self._safe_edit_message(callback, quiz_text, keyboard_manager.get_games_menu())

            elif callback_data == "game_ball":
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –≤–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä
                memory_manager.set_user_active_game(user_id, "magic_ball")

                ball_text = "üé± <b>–í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä</b>\n\nüéØ <b>–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ë—É–¥–µ—Ç –ª–∏ –∑–∞–≤—Ç—Ä–∞ –¥–æ–∂–¥—å?' –∏–ª–∏ '–°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —É—á–∏—Ç—å—Å—è?'"
                await self._safe_edit_message(callback, ball_text, keyboard_manager.get_games_menu())

            elif callback_data.startswith("quiz_answer_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
                user_answer = callback_data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (1, 2, 3, 4)
                game_data = memory_manager.get_user_game_data(user_id)

                if game_data and 'correct_answer' in game_data:
                    correct_answer = game_data['correct_answer']
                    question = game_data.get('question', '')
                    options = game_data.get('options', [])

                    result = game_service.check_quiz_answer(question, user_answer, correct_answer)

                    if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" in result:
                        # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                        memory_manager.clear_user_active_game(user_id)
                        await callback.message.reply(f"üß† {result}\n\n–•–æ—á–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞' –≤ –º–µ–Ω—é!", reply_markup=keyboard_manager.get_menu_button())

                        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
                        try:
                            self.db.update_user_stats(user_id, "total_quiz_games")
                        except Exception as e:
                            log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç
                        hint = game_data.get('hint', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                        wrong_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\nüí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {hint}\n\nüéØ <b>–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç:</b>"

                        if options:
                            await self._safe_edit_message(callback, wrong_text, keyboard_manager.get_quiz_answers_menu(options))
                        else:
                            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
                else:
                    await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            elif callback_data == "quiz_hint":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
                game_data = memory_manager.get_user_game_data(user_id)

                if game_data and 'hint' in game_data and 'question' in game_data:
                    question = game_data['question']
                    hint = game_data['hint']
                    options = game_data.get('options', [])

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
                    hint_text = f"üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞:</b>\n\n‚ùì {question}\n\nüí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {hint}\n\nüéØ <b>–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
                    current_text = callback.message.text or ""
                    if current_text != hint_text and options:
                        await self._safe_edit_message(callback, hint_text, keyboard_manager.get_quiz_answers_menu(options))
                    else:
                        await callback.answer("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞!")
                else:
                    await callback.answer("‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            elif callback_data == "tool_calc":
                calc_text = ("üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n\n"
                           "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /calc &lt;–≤—ã—Ä–∞–∂–µ–Ω–∏–µ&gt;\n\n"
                           "–ü—Ä–∏–º–µ—Ä—ã:\n"
                           "‚Ä¢ /calc 2 + 2\n"
                           "‚Ä¢ /calc 5 * (3 + 2)\n"
                           "‚Ä¢ /calc 2^8")
                await self._safe_edit_message(callback, calc_text, keyboard_manager.get_tools_menu())

            elif callback_data == "tool_weather":
                weather_text = "üå§Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:"
                await self._safe_edit_message(callback, weather_text, keyboard_manager.get_uzbekistan_weather_menu())

            elif callback_data == "tool_translate":
                translate_text = "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –∏ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:"
                await self._safe_edit_message(callback, translate_text, keyboard_manager.get_translation_languages_menu())

            # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            elif callback_data == "fun_joke":
                joke = fun_service.get_random_joke()
                joke_text = f"ü§£ <b>–®—É—Ç–∫–∞:</b>\n\n{joke}"
                await self._safe_edit_message(callback, joke_text, keyboard_manager.get_tools_menu())

            elif callback_data == "fun_quote":
                quote = fun_service.get_motivational_quote()
                quote_text = f"üí° <b>–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞:</b>\n\n{quote}"
                await self._safe_edit_message(callback, quote_text, keyboard_manager.get_tools_menu())

            elif callback_data == "fun_fact":
                fact = fun_service.get_random_fact()
                await self._safe_edit_message(callback, fact, keyboard_manager.get_tools_menu())

            # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            elif callback_data == "stats":
                stats = memory_manager.get_user_statistics(user_id)
                if stats:
                    stats_text = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–≤–æ–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π:</b>\n\n"
                                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
                                f"üóÇÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏: {stats['current_messages']}\n"
                                f"üìÖ –ù–∞—á–∞–ª–∏ –æ–±—â–∞—Ç—å—Å—è: {stats['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                                f"‚è∞ –í—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ: {int(stats['conversation_duration'] / 3600)} —á {int((stats['conversation_duration'] % 3600) / 60)} –º–∏–Ω")
                    await self._safe_edit_message(callback, stats_text, keyboard_manager.get_main_menu())
                else:
                    await self._safe_edit_message(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", keyboard_manager.get_main_menu())

            elif callback_data == "clear_memory":
                confirm_text = (
                    "üß† <b>–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏</b>\n\n"
                    "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!\n\n"
                    "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å?"
                )
                await self._safe_edit_message(callback, confirm_text, keyboard_manager.get_confirmation_menu("clear_memory", "confirm_clear_memory"))

            elif callback_data == "confirm_clear_memory":
                if memory_manager.clear_user_memory(user_id):
                    success_text = ("üß† <b>–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
                                  "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞\n"
                                  "üîÑ –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!\n\n"
                                  "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
                    await self._safe_edit_message(callback, success_text, keyboard_manager.get_main_menu())
                else:
                    await self._safe_edit_message(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", keyboard_manager.get_main_menu())

            elif callback_data == "help":
                current_persona = persona_manager.get_current_persona()
                available_commands = persona_manager.get_available_commands()

                help_text = (
                    "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
                    f"üé≠ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current_persona.name}\n\n"
                    "<b>üéÆ –ö–Ω–æ–ø–∫–∏:</b>\n"
                    "‚Ä¢ –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è - –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
                    "‚Ä¢ –ò–≥—Ä—ã - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –∏ –∏–≥—Ä–∞–π!\n"
                    "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –ø–æ–≥–æ–¥–∞, –ø–µ—Ä–µ–≤–æ–¥\n\n"
                    "<b>üéØ –£–¥–æ–±—Å—Ç–≤–æ:</b>\n"
                    "‚Ä¢ –í –∏–≥—Ä–∞—Ö –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –æ—Ç–≤–µ—Ç—ã (—á–∏—Å–ª–∞, —Å–ª–æ–≤–∞)\n"
                    "‚Ä¢ –î–ª—è –æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                    "‚Ä¢ –í—Å–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥!\n\n"
                    "<b>üéÆ –ò–≥—Ä—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥:</b>\n"
                    "‚Ä¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —á–∏—Å–ª–∞\n"
                    "‚Ä¢ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ø–∏—à–∏ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (1-4)\n"
                    "‚Ä¢ –ö–ù–ë - –ø–∏—à–∏: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞\n"
                    "‚Ä¢ –í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä - –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å\n\n"
                    "ü§ñ <i>–°–æ–∑–¥–∞–Ω Javohir Zokirjonov</i>"
                )

                await self._safe_edit_message(callback, help_text, keyboard_manager.get_main_menu())

            elif callback_data == "cancel":
                await self._safe_edit_message(callback, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", keyboard_manager.get_main_menu())

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
            elif callback_data.startswith("weather_"):
                await self._handle_weather_region_callback(callback, callback_data)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            elif callback_data.startswith("lang_"):
                await self._handle_translation_language_callback(callback, callback_data)

            # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é
            elif callback_data == "show_main_menu":
                current_persona = persona_manager.get_current_persona()
                is_admin = callback.from_user.id == config.ADMIN_USER_ID
                menu_text = (
                    "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                    f"üé≠ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current_persona.name}\n\n"
                    "üéÆ <b>–í—ã–±–µ—Ä–∏, —á–µ–º –∑–∞–π–º–µ–º—Å—è:</b>"
                )
                await self._safe_edit_message(callback, menu_text, keyboard_manager.get_main_menu(is_admin))

            # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            elif callback_data == "admin_panel":
                if callback.from_user.id == config.ADMIN_USER_ID:
                    admin_text = "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:"
                    await self._safe_edit_message(callback, admin_text, keyboard_manager.get_admin_menu())
                else:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

            elif callback_data == "admin_main":
                if callback.from_user.id == config.ADMIN_USER_ID:
                    admin_text = "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:"
                    await self._safe_edit_message(callback, admin_text, keyboard_manager.get_admin_menu())
                else:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

            elif callback_data.startswith("admin_"):
                if callback.from_user.id == config.ADMIN_USER_ID:
                    await self._handle_admin_callback(callback, callback_data)
                else:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback
            else:
                await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await callback.answer()

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {callback_data}: {str(e)}", user_id, e)
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def _handle_weather_region_callback(self, callback: types.CallbackQuery, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã."""
        user_id = callback.from_user.id

        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è callback_data –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤/–æ–±–ª–∞—Å—Ç–µ–π
        region_map = {
            "weather_tashkent": "–¢–∞—à–∫–µ–Ω—Ç",
            "weather_andijan": "–ê–Ω–¥–∏–∂–∞–Ω",
            "weather_bukhara": "–ë—É—Ö–∞—Ä–∞",
            "weather_jizzakh": "–î–∂–∏–∑–∞–∫",
            "weather_karakalpakstan": "–ù—É–∫—É—Å",  # –°—Ç–æ–ª–∏—Ü–∞ –ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω–∞
            "weather_kashkadarya": "–ö–∞—Ä—à–∏",
            "weather_namangan": "–ù–∞–º–∞–Ω–≥–∞–Ω",
            "weather_navoi": "–ù–∞–≤–æ–∏",
            "weather_samarkand": "–°–∞–º–∞—Ä–∫–∞–Ω–¥",
            "weather_surkhondarya": "–¢–µ—Ä–º–µ–∑",
            "weather_syrdarya": "–ì—É–ª–∏—Å—Ç–∞–Ω",
            "weather_tashkent_region": "–ß–∏—Ä—á–∏–∫",  # –ö—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
            "weather_fergana": "–§–µ—Ä–≥–∞–Ω–∞",
            "weather_khorezm": "–£—Ä–≥–µ–Ω—á"
        }

        region_name = region_map.get(callback_data, callback_data.replace("weather_", "").title())

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather_info = weather_service.get_weather(region_name)

        if weather_info:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –æ–±–ª–∞—Å—Ç–µ–π
            weather_text = f"üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞ –≤ {region_name}</b>\n\n{weather_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–±–ª–∞—Å—Ç—å:"
            await self._safe_edit_message(callback, weather_text, keyboard_manager.get_uzbekistan_weather_menu())
            log_info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è {region_name}", user_id)
        else:
            # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
            error_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {region_name}.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –æ–±–ª–∞—Å—Ç—å:"
            await self._safe_edit_message(callback, error_text, keyboard_manager.get_uzbekistan_weather_menu())
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è {region_name}", user_id)

    async def _handle_translation_language_callback(self, callback: types.CallbackQuery, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."""
        user_id = callback.from_user.id

        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è callback_data –∏ –∫–æ–¥–æ–≤ —è–∑—ã–∫–æ–≤
        lang_map = {
            "lang_uz": "uz",
            "lang_ru": "ru",
            "lang_en": "en",
            "lang_es": "es",
            "lang_fr": "fr",
            "lang_de": "de",
            "lang_it": "it",
            "lang_pt": "pt",
            "lang_zh": "zh",
            "lang_ja": "ja",
            "lang_ko": "ko"
        }

        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ —è–∑—ã–∫–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        lang_names = {
            "uz": "üá∫üáø —É–∑–±–µ–∫—Å–∫–∏–π",
            "ru": "üá∑üá∫ —Ä—É—Å—Å–∫–∏–π",
            "en": "üá∫üá∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "es": "üá™üá∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π",
            "fr": "üá´üá∑ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
            "de": "üá©üá™ –Ω–µ–º–µ—Ü–∫–∏–π",
            "it": "üáÆüáπ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
            "pt": "üáµüáπ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
            "zh": "üá®üá≥ –∫–∏—Ç–∞–π—Å–∫–∏–π",
            "ja": "üáØüáµ —è–ø–æ–Ω—Å–∫–∏–π",
            "ko": "üá∞üá∑ –∫–æ—Ä–µ–π—Å–∫–∏–π"
        }

        target_lang = lang_map.get(callback_data)
        lang_name = lang_names.get(target_lang, callback_data.replace("lang_", "").title())

        if target_lang:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            memory_manager.set_user_active_game(user_id, f"translate_{target_lang}", {})

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞
            translate_text = f"üåê <b>–í—ã–±—Ä–∞–Ω —è–∑—ã–∫:</b> {lang_name}\n\n<i>–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!</i>\n\n–ü—Ä–∏–º–µ—Ä: –ü—Ä–∏–≤–µ—Ç –º–∏—Ä"
            await self._safe_edit_message(callback, translate_text, keyboard_manager.get_translation_languages_menu())

            log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {target_lang}", user_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞")

    async def _handle_admin_callback(self, callback: types.CallbackQuery, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤."""
        user_id = callback.from_user.id

        try:
            if callback_data == "admin_users":
                users_text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                await self._safe_edit_message(callback, users_text, keyboard_manager.get_admin_users_menu())

            elif callback_data == "admin_stats":
                stats_text = "üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
                await self._safe_edit_message(callback, stats_text, keyboard_manager.get_admin_stats_menu())

            elif callback_data == "admin_search":
                search_text = "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
                await self._safe_edit_message(callback, search_text, keyboard_manager.get_admin_search_menu())

            elif callback_data == "admin_users_list":
                await self._show_users_list(callback)

            elif callback_data == "admin_top_users":
                await self._show_top_users(callback)

            elif callback_data == "admin_stats_general":
                await self._show_general_stats(callback)

            elif callback_data == "admin_stats_games":
                await self._show_games_stats(callback)

            elif callback_data == "admin_stats_messages":
                await self._show_messages_stats(callback)

            elif callback_data.startswith("admin_clear_user"):
                await self._handle_clear_user(callback)

            elif callback_data == "admin_clear_all":
                await self._handle_clear_all_users(callback)

            elif callback_data == "confirm_clear_all":
                await self._confirm_clear_all_users(callback)

            elif callback_data.startswith("admin_ban_user"):
                await self._handle_ban_user(callback)

            elif callback_data.startswith("admin_unban_user"):
                await self._handle_unban_user(callback)

            else:
                await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞")

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã {callback_data}: {str(e)}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    async def _show_users_list(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            users = self.db.get_all_users(limit=20)

            if not users:
                text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                for user in users:
                    status = "üö´" if user.get('banned_until') else "‚úÖ"
                    username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                    text += f"{status} <code>{user['id']}</code> - {user['first_name']} ({username})\n"
                    text += f"   üìä –°–æ–æ–±—â–µ–Ω–∏–π: {user['total_messages']} | üéÆ –ò–≥—Ä: {user['total_games']}\n\n"

                text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"

            await self._safe_edit_message(callback, text, keyboard_manager.get_admin_users_menu())

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    async def _show_top_users(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º."""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            users = self.db.get_all_users(limit=10)

            if not users:
                text = "üëë <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                text = "üëë <b>–¢–æ–ø 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"

                for i, user in enumerate(users[:10], 1):
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚≠ê"
                    username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                    text += f"{medal} <b>{i}.</b> <code>{user['id']}</code>\n"
                    text += f"   üë§ {user['first_name']} ({username})\n"
                    text += f"   üìä –°–æ–æ–±—â–µ–Ω–∏–π: {user['total_messages']}\n"
                    text += f"   üéÆ –ò–≥—Ä: {user['total_games']} | üåê –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {user['total_translations']}\n\n"

            await self._safe_edit_message(callback, text, keyboard_manager.get_admin_search_menu())

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    async def _show_general_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        try:
            stats = self.db.get_system_stats()

            text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
            text += f"üéÆ –ò–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π: {stats['total_games']}\n\n"

            text += "<b>–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n"
            for msg_type, count in stats['message_types'].items():
                text += f"‚Ä¢ {msg_type}: {count}\n"

            await self._safe_edit_message(callback, text, keyboard_manager.get_admin_stats_menu())

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def _show_games_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä."""
        try:
            text = "üéÆ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä</b>\n\n"
            text += "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
            text += "–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"

            await self._safe_edit_message(callback, text, keyboard_manager.get_admin_stats_menu())

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä: {str(e)}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä")

    async def _show_messages_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            text = "üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            text += "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
            text += "–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"

            await self._safe_edit_message(callback, text, keyboard_manager.get_admin_stats_menu())

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

    async def _handle_clear_user(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = "üßπ <b>–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:\n\n"
        text += "<i>–ü—Ä–∏–º–µ—Ä: 123456789</i>\n\n"
        text += "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ ID –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."

        await self._safe_edit_message(callback, text, keyboard_manager.get_admin_users_menu())

    async def _handle_clear_all_users(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        text = "üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –í–°–ï–ô —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
        text += "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        text += "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
        text += "‚Ä¢ –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        text += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π\n"
        text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        text += "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"

        confirm_markup = keyboard_manager.get_confirmation_menu("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "confirm_clear_all")
        await self._safe_edit_message(callback, text, confirm_markup)

    async def _handle_ban_user(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n\n"
        text += "<i>–ü—Ä–∏–º–µ—Ä: 123456789</i>\n\n"
        text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."

        await self._safe_edit_message(callback, text, keyboard_manager.get_admin_users_menu())

    async def _handle_unban_user(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = "‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n\n"
        text += "<i>–ü—Ä–∏–º–µ—Ä: 123456789</i>"

        await self._safe_edit_message(callback, text, keyboard_manager.get_admin_users_menu())

    async def _confirm_clear_all_users(self, callback: types.CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            self.db.clear_all_users_stats()

            text = "‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            text += "üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞:\n"
            text += "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è\n"
            text += "‚Ä¢ –ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏\n"
            text += "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n"
            text += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞\n"
            text += "‚Ä¢ –§–∞–∫—Ç—ã –∏ —à—É—Ç–∫–∏\n\n"
            text += "üìä <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ"

            await self._safe_edit_message(callback, text, keyboard_manager.get_admin_users_menu())

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            error_text += f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            error_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"

            await self._safe_edit_message(callback, error_text, keyboard_manager.get_admin_users_menu())

    def _is_same_markup(self, markup1, markup2) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        if not markup1 or not markup2:
            return False
        try:
            return (markup1.inline_keyboard == markup2.inline_keyboard)
        except:
            return False

    async def _safe_edit_message(self, callback, text: str, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        try:
            current_text = callback.message.text or ""
            current_markup = callback.message.reply_markup

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
            if current_text != text or not self._is_same_markup(current_markup, reply_markup):
                await callback.message.edit_text(text, reply_markup=reply_markup)
            else:
                await callback.answer("–£–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    async def show_main_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        user_id = message.from_user.id
        log_info("–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é", user_id)

        current_persona = persona_manager.get_current_persona()

        welcome_text = (
            "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            f"üé≠ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current_persona.name}\n\n"
            "üéÆ <b>–í—ã–±–µ—Ä–∏, —á–µ–º –∑–∞–π–º–µ–º—Å—è:</b>"
        )

        await message.reply(
            welcome_text,
            reply_markup=keyboard_manager.get_main_menu()
        )

    async def handle_text_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_id = message.from_user.id
        text = message.text.strip()

        log_info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}...", user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
        tool_response = await self._check_tool_request(user_id, text, message)
        if tool_response:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
        game_response = await self._check_game_response(user_id, text, message)
        if game_response:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
        memory_manager.add_user_message(user_id, text, 'text')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(message.chat.id, "typing")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            context = memory_manager.get_user_context(user_id)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if context:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
                enhanced_text = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{context}\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}"
            else:
                enhanced_text = text

            response = gemini_client.generate_text_response(enhanced_text)

            if response:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ (Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç)
                if len(response) > 4000:
                    response = response[:4000] + "...\n\n<i>–û—Ç–≤–µ—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram</i>"

                await message.reply(response, reply_markup=keyboard_manager.get_menu_button())
                log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user_id)

                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
                try:
                    self.db.log_message(user_id, "text", content=text, response=response)
                    self.db.update_user_stats(user_id, "total_messages")
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç—å
                memory_manager.add_assistant_message(user_id, response, 'text')
            else:
                error_msg = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                await message.reply(error_msg)
                log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user_id)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ø–∞–º—è—Ç—å
                memory_manager.add_assistant_message(user_id, error_msg, 'text')

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", user_id, e)
            error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            await message.reply(error_msg)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ø–∞–º—è—Ç—å
            memory_manager.add_assistant_message(user_id, error_msg, 'text')

    async def _check_game_response(self, user_id: int, text: str, message: types.Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É."""
        active_game = memory_manager.get_user_active_game(user_id)

        if not active_game:
            return False

        try:
            if active_game == "guess_number":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
                if text.isdigit():
                    guess = int(text)
                    game_data = memory_manager.get_user_game_data(user_id)
                    target_number = game_data.get('target_number')

                    if target_number:
                        result = game_service.check_guess(guess, target_number)

                        if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" in result:
                            # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                            memory_manager.clear_user_active_game(user_id)
                            await message.reply(f"üéâ {result}\n\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' –≤ –º–µ–Ω—é!", reply_markup=keyboard_manager.get_menu_button())

                            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
                            try:
                                self.db.update_user_stats(user_id, "total_games")
                            except Exception as e:
                                log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≥–∞–¥–∞–π —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

                            return True  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä—ã
                        else:
                            await message.reply(f"üéØ {result}", reply_markup=keyboard_manager.get_menu_button())
                            return True  # –í–∞–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å True, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∞—Å—å

            elif active_game == "quiz":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 4
                if text.isdigit() and 1 <= int(text) <= 4:
                    game_data = memory_manager.get_user_game_data(user_id)
                    correct_answer = game_data.get('correct_answer')
                    question = game_data.get('question', '')

                    if correct_answer:
                        result = game_service.check_quiz_answer(question, text, correct_answer)

                        if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" in result:
                            # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                            memory_manager.clear_user_active_game(user_id)
                            await callback.message.reply(f"üß† {result}\n\n–•–æ—á–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞' –≤ –º–µ–Ω—é!", reply_markup=keyboard_manager.get_menu_button())

                            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
                            try:
                                self.db.update_user_stats(user_id, "total_quiz_games")
                            except Exception as e:
                                log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

                            return True  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
                        else:
                            # –î–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –¥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç
                            game_data = memory_manager.get_user_game_data(user_id)
                            hint = game_data.get('hint', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞') if game_data else '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
                            options = game_data.get('options', []) if game_data else []

                            if options:
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                                wrong_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\nüí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {hint}\n\nüéØ <b>–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç:</b>"
                                await message.reply(wrong_text, reply_markup=keyboard_manager.get_quiz_answers_menu(options))
                            else:
                                # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                                await message.reply(f"üìö {result}", reply_markup=keyboard_manager.get_menu_button())
                        return True

            elif active_game == "rps":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
                choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']
                if text.lower() in choices:
                    result = game_service.play_rps(text.lower())
                    memory_manager.clear_user_active_game(user_id)
                    await message.reply(f"üéÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:</b>\n\n{result}\n\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ? –ù–∞–∂–º–∏ 'ü™® –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞'!", reply_markup=keyboard_manager.get_menu_button())
                    return True

            elif active_game == "magic_ball":
                # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º –∫ –≤–æ–ª—à–µ–±–Ω–æ–º—É —à–∞—Ä—É
                if len(text.strip()) > 0:
                    answer = game_service.get_magic_ball_answer(text.strip())
                    memory_manager.clear_user_active_game(user_id)
                    await message.reply(f"‚ùì <b>–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å:</b> {text}\n\n{answer}\n\n–•–æ—á–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ? –ù–∞–∂–º–∏ 'üé± –í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä'!", reply_markup=keyboard_manager.get_menu_button())

                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
                    try:
                        self.db.log_message(user_id, "magic_ball", content=text.strip(), response=answer)
                        # –í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏-–∏–≥—Ä—É, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ total_games
                    except Exception as e:
                        log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ª—à–µ–±–Ω–æ–≥–æ —à–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                    return True

            elif active_game.startswith("translate_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                if len(text.strip()) > 0:
                    target_lang = active_game.replace("translate_", "")
                    translation = translator.translate_text(text, target_lang)

                    if translation:
                        memory_manager.clear_user_active_game(user_id)
                        await message.reply(f"üåê <b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {translator.SUPPORTED_LANGUAGES.get(target_lang, target_lang)}:</b>\n\n{translation}\n\n–•–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â–µ —Ç–µ–∫—Å—Ç? –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –≤ –º–µ–Ω—é 'üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫'!", reply_markup=keyboard_manager.get_menu_button())
                        log_info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_lang}: {text[:50]}...", user_id)
                    else:
                        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.")
                        log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {target_lang}: {text}", user_id)
                    return True

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–≥—Ä—É {active_game}: {str(e)}", user_id)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")

        return False

    async def _check_tool_request(self, user_id: int, text: str, message: types.Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)."""
        text_lower = text.lower().strip()

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
            weather_keywords = ['–ø–æ–≥–æ–¥–∞', '–ø–æ–≥–æ–¥–∫–∞', '–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞', 'weather', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–ø—Ä–æ–≥–Ω–æ–∑']
            if any(keyword in text_lower for keyword in weather_keywords):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                city = self._extract_city_from_weather_request(text)
                if city:
                    return await self._process_weather_request(user_id, city, message)
                else:
                    await message.reply("üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞</b>\n\n"
                                      "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: <i>–ø–æ–≥–æ–¥–∞ –≤ [–≥–æ—Ä–æ–¥]</i>\n"
                                      "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –¢–∞—à–∫–µ–Ω—Ç–µ")
                    return True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∞
            translate_keywords = ['–ø–µ—Ä–µ–≤–µ–¥–∏', '–ø–µ—Ä–µ–≤–æ–¥', 'translate', 'translation']
            if any(keyword in text_lower for keyword in translate_keywords):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                lang, text_to_translate = self._extract_translation_from_request(text)
                if lang and text_to_translate:
                    return await self._process_translation_request(user_id, lang, text_to_translate, message)
                else:
                    await message.reply("üåê <b>–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</b>\n\n"
                                      "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: <i>–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]</i>\n"
                                      "–Ø–∑—ã–∫–∏: ru, en, es, fr, de, it, pt, zh, ja, ko\n\n"
                                      "–ü—Ä–∏–º–µ—Ä—ã:\n"
                                      "‚Ä¢ –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏–≤–µ—Ç –º–∏—Ä\n"
                                      "‚Ä¢ translate to russian hello world")
                    return True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
            if self._is_math_expression(text):
                return await self._process_calc_request(user_id, text, message)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ñ–∞–∫—Ç–æ–≤/—à—É—Ç–æ–∫/—Ü–∏—Ç–∞—Ç
            fun_keywords = ['—Ñ–∞–∫—Ç', '—à—É—Ç–∫–∞', '—Ü–∏—Ç–∞—Ç–∞', 'fact', 'joke', 'quote', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç']
            if any(keyword in text_lower for keyword in fun_keywords):
                return await self._process_fun_request(user_id, text, message)

            return False

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {str(e)}", user_id)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            return True

    def _extract_city_from_weather_request(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã."""
        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥
        text = text.lower()
        for keyword in ['–ø–æ–≥–æ–¥–∞', '–ø–æ–≥–æ–¥–∫–∞', '–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞', 'weather', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–ø—Ä–æ–≥–Ω–æ–∑', '–≤', '–Ω–∞', '–≤–æ']:
            text = text.replace(keyword, '')

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        city = text.strip(' ,.!?').title()

        if len(city) > 1:
            return city
        return None

    async def _process_weather_request(self, user_id: int, city: str, message: types.Message) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã."""
        weather_info = weather_service.get_weather(city)

        if weather_info:
            await message.reply(weather_info, reply_markup=keyboard_manager.get_menu_button())
            log_info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}", user_id)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
            try:
                self.db.log_message(user_id, "weather", content=city, response=weather_info)
                self.db.update_user_stats(user_id, "total_weather_requests")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        else:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}", user_id)

        return True

    def _extract_translation_from_request(self, text: str) -> Tuple[Optional[str], Optional[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —è–∑—ã–∫ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."""
        text_lower = text.lower()

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]"
        import re

        # –†—É—Å—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        ru_match = re.search(r'–ø–µ—Ä–µ–≤–µ–¥–∏\s+–Ω–∞\s+(\w+)\s+(.+)', text_lower, re.IGNORECASE)
        if ru_match:
            lang = ru_match.group(1).lower()
            text_to_translate = ru_match.group(2).strip()
            return lang, text_to_translate

        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        en_match = re.search(r'translate\s+to\s+(\w+)\s+(.+)', text_lower, re.IGNORECASE)
        if en_match:
            lang = en_match.group(1).lower()
            text_to_translate = en_match.group(2).strip()
            return lang, text_to_translate

        return None, None

    async def _process_translation_request(self, user_id: int, lang: str, text_to_translate: str, message: types.Message) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∞."""
        if lang not in translator.SUPPORTED_LANGUAGES:
            await message.reply(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {lang}\n"
                              f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(translator.SUPPORTED_LANGUAGES.keys())}")
            return True

        translation = translator.translate_text(text_to_translate, lang)

        if translation:
            await message.reply(translation, reply_markup=keyboard_manager.get_menu_button())
            log_info(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ {lang}: {text_to_translate[:50]}...", user_id)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
            try:
                self.db.log_message(user_id, "translation", content=text_to_translate, response=translation)
                self.db.update_user_stats(user_id, "total_translations")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.")
            log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {text_to_translate}", user_id)

        return True

    def _is_math_expression(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º."""
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        text = text.replace(' ', '')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        has_digits = any(c.isdigit() for c in text)
        has_operators = any(c in '+-*/^()' for c in text)

        return has_digits and has_operators and len(text) > 1

    async def _process_calc_request(self, user_id: int, expression: str, message: types.Message) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å."""
        result = calculator.calculate(expression)

        if result:
            await message.reply(f"üßÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\n{expression} = {result}", reply_markup=keyboard_manager.get_menu_button())
            log_info(f"–í—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞—Å—á–µ—Ç: {expression} = {result}", user_id)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
            try:
                self.db.log_message(user_id, "calculator", content=expression, response=str(result))
                self.db.update_user_stats(user_id, "total_calculations")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.", reply_markup=keyboard_manager.get_menu_button())
            log_error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {expression}", user_id)

        return True

    async def _process_fun_request(self, user_id: int, text: str, message: types.Message) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ñ–∞–∫—Ç–æ–≤/—à—É—Ç–æ–∫/—Ü–∏—Ç–∞—Ç."""
        text_lower = text.lower()

        if '—à—É—Ç–∫–∞' in text_lower or 'joke' in text_lower:
            joke = fun_service.get_random_joke()
            await message.reply(f"üòÇ <b>–®—É—Ç–∫–∞:</b>\n\n{joke}", reply_markup=keyboard_manager.get_menu_button())
            log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —à—É—Ç–∫–∞", user_id)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
            try:
                self.db.log_message(user_id, "joke", response=joke)
                self.db.update_user_stats(user_id, "total_jokes")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —à—É—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

        elif '—Ñ–∞–∫—Ç' in text_lower or 'fact' in text_lower:
            fact = fun_service.get_random_fact()
            await message.reply(f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}", reply_markup=keyboard_manager.get_menu_button())
            log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–∫—Ç", user_id)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
            try:
                self.db.log_message(user_id, "fact", response=fact)
                self.db.update_user_stats(user_id, "total_facts")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

        elif '—Ü–∏—Ç–∞—Ç–∞' in text_lower or 'quote' in text_lower:
            quote = fun_service.get_random_quote()
            await message.reply(f"üí≠ <b>–¶–∏—Ç–∞—Ç–∞:</b>\n\n{quote}", reply_markup=keyboard_manager.get_menu_button())
            log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", user_id)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
            try:
                self.db.log_message(user_id, "quote", response=quote)
                self.db.update_user_stats(user_id, "total_quotes")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç
            fact = fun_service.get_random_fact()
            await message.reply(f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}", reply_markup=keyboard_manager.get_menu_button())
            log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–∫—Ç", user_id)

        return True

    async def handle_photo_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
        user_id = message.from_user.id
        log_info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º", user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ"
        await message.bot.send_chat_action(message.chat.id, "upload_photo")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = message.photo[-1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if photo.file_size > config.MAX_FILE_SIZE:
                await message.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
                return

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_info = await message.bot.get_file(photo.file_id)
            image_data = await message.bot.download_file(file_info.file_path)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            prompt = "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ß—Ç–æ –Ω–∞ –Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ?"

            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ –ø—Ä–æ–º–ø—Ç
            if message.caption:
                prompt = message.caption

            response = gemini_client.analyze_image(image_data.read(), prompt)

            if response:
                await message.reply(response)
                log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", user_id)
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
                log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", user_id)

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", user_id, e)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    async def handle_voice_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_id = message.from_user.id
        log_info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        await message.bot.send_chat_action(message.chat.id, "record_voice")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if message.voice.file_size > config.MAX_FILE_SIZE:
                await message.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
                return

            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            file_info = await message.bot.get_file(message.voice.file_id)
            audio_data = await message.bot.download_file(file_info.file_path)

            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Gemini API
            recognized_text = gemini_client.transcribe_audio_with_gemini(audio_data.read())

            if recognized_text:
                log_info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–µ—Ä–µ–∑ Gemini: {recognized_text[:100]}...", user_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply(f"üéµ <i>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</i> {recognized_text}")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
                response = gemini_client.generate_text_response(recognized_text)

                if response:
                    await message.reply(response)
                    log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user_id)
                else:
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")
                    log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user_id)
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏", user_id)

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", user_id, e)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def handle_audio_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤."""
        user_id = message.from_user.id
        log_info("–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª", user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ"
        await message.bot.send_chat_action(message.chat.id, "upload_voice")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if message.audio.file_size > config.MAX_FILE_SIZE:
                await message.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
                return

            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            file_info = await message.bot.get_file(message.audio.file_id)
            audio_data = await message.bot.download_file(file_info.file_path)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            mime_type = "audio/mpeg"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if hasattr(message.audio, 'file_name') and message.audio.file_name:
                if message.audio.file_name.lower().endswith('.ogg'):
                    mime_type = "audio/ogg"
                elif message.audio.file_name.lower().endswith('.mp3'):
                    mime_type = "audio/mpeg"
                elif message.audio.file_name.lower().endswith('.wav'):
                    mime_type = "audio/wav"

            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Gemini API
            recognized_text = gemini_client.transcribe_audio_with_gemini(audio_data.read(), mime_type)

            if recognized_text:
                log_info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Gemini: {recognized_text[:100]}...", user_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply(f"üéµ <i>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</i> {recognized_text}")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
                response = gemini_client.generate_text_response(recognized_text)

                if response:
                    await message.reply(response)
                    log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª", user_id)
                else:
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")
                    log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª", user_id)
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
                log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ", user_id)

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {str(e)}", user_id, e)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞.")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        log_info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
        await self.dp.start_polling(self.bot)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
        log_info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        await self.bot.session.close()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
ai_bot = AIBot()
