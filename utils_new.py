"""
–ú–æ–¥—É–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –±–æ—Ç–∞.
–í–∫–ª—é—á–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫, –∏–≥—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
"""

import re
import random
import requests
from typing import Optional, Tuple, List
from datetime import datetime

from logger import log_info, log_error


class Calculator:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π."""

    def evaluate_expression(self, expression: str) -> Optional[float]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.

        Args:
            expression: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ

        Returns:
            float: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –û—á–∏—â–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            expression = re.sub(r'[^\d+\-*/().\s]', '', expression)

            # –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            expression = expression.replace('^', '**')

            # –í—ã—á–∏—Å–ª—è–µ–º
            result = eval(expression, {"__builtins": {}})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —á–∏—Å–ª–æ
            if isinstance(result, (int, float)):
                return float(result)

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è '{expression}': {str(e)}")
            return None

        return None


class Translator:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö API."""

    SUPPORTED_LANGUAGES = {
        'ru': '—Ä—É—Å—Å–∫–∏–π',
        'en': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
        'es': '–∏—Å–ø–∞–Ω—Å–∫–∏–π',
        'fr': '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
        'de': '–Ω–µ–º–µ—Ü–∫–∏–π',
        'it': '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
        'pt': '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π',
        'zh': '–∫–∏—Ç–∞–π—Å–∫–∏–π',
        'ja': '—è–ø–æ–Ω—Å–∫–∏–π',
        'ko': '–∫–æ—Ä–µ–π—Å–∫–∏–π'
    }

    def translate_text(self, text: str, target_lang: str = 'en') -> Optional[str]:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫.

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)

        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock-–ø–µ—Ä–µ–≤–æ–¥
            log_info(f"–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {target_lang}: {text[:50]}...")

            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –ø–µ—Ä–µ–≤–æ–¥–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä: Google Translate API, Yandex Translate API –∏ —Ç.–¥.

            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return f"[–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {self.SUPPORTED_LANGUAGES.get(target_lang, target_lang)}]: {text}"

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return None


class WeatherService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ."""

    def get_weather(self, city: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.

        Args:
            city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

        Returns:
            str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Weather API
            # –ù–∞–ø—Ä–∏–º–µ—Ä: OpenWeatherMap, WeatherAPI –∏ —Ç.–¥.

            log_info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")

            # Mock-–æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            weather_conditions = ["—Å–æ–ª–Ω–µ—á–Ω–æ", "–æ–±–ª–∞—á–Ω–æ", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "–ø–∞—Å–º—É—Ä–Ω–æ"]
            temperatures = random.randint(-10, 35)

            return f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city.title()}:\n" \
                   f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperatures}¬∞C\n" \
                   f"üå•Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {random.choice(weather_conditions)}\n" \
                   f"üí® –í–ª–∞–∂–Ω–æ—Å—Ç—å: {random.randint(30, 90)}%\n" \
                   f"üí® –í–µ—Ç–µ—Ä: {random.randint(0, 20)} –º/—Å"

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {str(e)}")
            return None


class GameService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–≥—Ä."""

    def play_rps(self, user_choice: str) -> str:
        """
        –ò–≥—Ä–∞ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞.

        Args:
            user_choice: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞)

        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        """
        choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']
        user_choice = user_choice.lower().strip()

        if user_choice not in choices:
            return "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞!"

        bot_choice = random.choice(choices)

        result = ""
        if user_choice == bot_choice:
            result = "ü§ù –ù–∏—á—å—è!"
        elif (user_choice == '–∫–∞–º–µ–Ω—å' and bot_choice == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
             (user_choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice == '–±—É–º–∞–≥–∞') or \
             (user_choice == '–±—É–º–∞–≥–∞' and bot_choice == '–∫–∞–º–µ–Ω—å'):
            result = "üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª!"
        else:
            result = "üò¢ –Ø –ø–æ–±–µ–¥–∏–ª!"

        return f"ü§ñ –Ø –≤—ã–±—Ä–∞–ª: {bot_choice}\nüßë –¢—ã –≤—ã–±—Ä–∞–ª: {user_choice}\n\n{result}"

    def guess_number_game(self, difficulty: str = 'medium') -> Tuple[str, int]:
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ.

        Args:
            difficulty: –°–ª–æ–∂–Ω–æ—Å—Ç—å (easy/medium/hard)

        Returns:
            Tuple[str, int]: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        """
        ranges = {
            'easy': (1, 10),
            'medium': (1, 100),
            'hard': (1, 1000)
        }

        min_val, max_val = ranges.get(difficulty, (1, 100))
        number = random.randint(min_val, max_val)

        message = f"üéÆ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}!\n" \
                 f"–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å! (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty})"

        return message, number

    def check_guess(self, guess: int, target: int) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ.

        Args:
            guess: –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —á–∏—Å–ª–æ
            target: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ

        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        if guess < target:
            return "üìà –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ! ‚¨ÜÔ∏è"
        elif guess > target:
            return "üìâ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ! ‚¨áÔ∏è"
        else:
            return "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã —É–≥–∞–¥–∞–ª! üéä"

    def play_dice_game(self, bet: str = 'medium') -> str:
        """–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏."""
        try:
            bets = {
                'low': (1, 3),
                'medium': (4, 10),
                'high': (11, 18)
            }

            min_bet, max_bet = bets.get(bet, (4, 10))
            user_dice = random.randint(min_bet, max_bet)
            bot_dice = random.randint(min_bet, max_bet)

            result = ""
            if user_dice > bot_dice:
                result = "üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª! üé≤"
            elif user_dice < bot_dice:
                result = "üò¢ –Ø –ø–æ–±–µ–¥–∏–ª! üé≤"
            else:
                result = "ü§ù –ù–∏—á—å—è! üé≤"

            return f"üéØ <b>–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏</b>\n\n" \
                   f"–¢–≤–æ–∏ –∫–æ—Å—Ç–∏: {user_dice}\n" \
                   f"–ú–æ–∏ –∫–æ—Å—Ç–∏: {bot_dice}\n\n" \
                   f"{result}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ: {str(e)}"

    def get_random_question(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
        questions = [
            ("–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?", ["–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–ó–µ–º–ª—è", "–ú–∞—Ä—Å"]),
            ("–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª 'O'?", ["–ö–∏—Å–ª–æ—Ä–æ–¥", "–ó–æ–ª–æ—Ç–æ", "–°–µ—Ä–µ–±—Ä–æ", "–£–≥–ª–µ—Ä–æ–¥"]),
            ("–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è Apple?", ["1976", "1980", "1970", "1985"]),
            ("–ö–∞–∫–∞—è —Ä–µ–∫–∞ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –≤ –º–∏—Ä–µ?", ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–Ø–Ω—Ü–∑—ã", "–ú–∏—Å—Å–∏—Å–∏–ø–∏"]),
            ("–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?", ["7", "6", "5", "8"]),
            ("–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π?", ["Python", "JavaScript", "Java", "C++"]),
            ("–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏?", ["–†–æ—Å—Å–∏—è", "–ö–∞–Ω–∞–¥–∞", "–ö–∏—Ç–∞–π", "–°–®–ê"]),
            ("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø—É—Ç–Ω–∏–∫ –ó–µ–º–ª–∏?", ["–õ—É–Ω–∞", "–ò–æ", "–ï–≤—Ä–æ–ø–∞", "–ì–∞–Ω–∏–º–µ–¥"])
        ]

        question, options = random.choice(questions)
        options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])

        return f"üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞!</b>\n\n‚ùì {question}\n\n{options_text}\n\n–û—Ç–≤–µ—Ç—å –Ω–æ–º–µ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!"

    def check_quiz_answer(self, question: str, user_answer: str, correct_answer: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
        try:
            answer_num = int(user_answer.strip())
            if 1 <= answer_num <= 4:
                if str(answer_num) == correct_answer:
                    return "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã —É–º–Ω–∏—Ü–∞! üß†"
                else:
                    return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            else:
                return "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4!"
        except ValueError:
            return "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4!"

    def get_magic_ball_answer(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤–æ–ª—à–µ–±–Ω–æ–≥–æ —à–∞—Ä–∞."""
        answers = [
            "üé± –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞!",
            "üé± –ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è!",
            "üé± –î–∞, –∫–æ–Ω–µ—á–Ω–æ!",
            "üé± –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞",
            "üé± –ú–æ–∂–µ—Ç –±—ã—Ç—å...",
            "üé± –¢—Ä—É–¥–Ω–æ —Å–∫–∞–∑–∞—Ç—å",
            "üé± –õ—É—á—à–µ –Ω–µ —Å–µ–π—á–∞—Å",
            "üé± –í—Ä—è–¥ –ª–∏",
            "üé± –ù–µ—Ç, –Ω–∞–≤–µ—Ä–Ω–æ–µ",
            "üé± –°–æ–≤—Å–µ–º –Ω–µ—Ç!",
            "üé± –ù–∏–∫–æ–≥–¥–∞!",
            "üé± –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑"
        ]
        return random.choice(answers)


class FunService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    def get_random_fact(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç."""
        facts = [
            "üêò –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Å–ª–æ–Ω –≤–µ—Å–∏–ª 12 —Ç–æ–Ω–Ω!",
            "ü¶à –ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏ –∑–∞ 200 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç –¥–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤!",
            "üåç –ó–µ–º–ª—è –≤—Ä–∞—â–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –∫–æ–≥–¥–∞-–ª–∏–±–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏!",
            "üêù –ü—á–µ–ª—ã –º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞!",
            "üåü –ó–≤–µ–∑–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –≤–∏–¥–∏–º –Ω–æ—á—å—é, –º–æ–≥—É—Ç —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å!",
            "ü¶í –ñ–∏—Ä–∞—Ñ—ã –∏–º–µ—é—Ç —Ç–∞–∫–æ–π –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–≤–æ–Ω–∫–æ–≤ –≤ —à–µ–µ, –∫–∞–∫ –∏ –ª—é–¥–∏ - 7!",
            "üåä –û–∫–µ–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 99% –≤—Å–µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –Ω–∞ –ó–µ–º–ª–µ!",
            "üêô –û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç 3 —Å–µ—Ä–¥—Ü–∞!",
            "üêß –ü–∏–Ω–≥–≤–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä—ã–≥–∞—Ç—å –¥–æ 6 –º–µ—Ç—Ä–æ–≤ –≤ –≤—ã—Å–æ—Ç—É!",
            "üå≥ –î–µ—Ä–µ–≤—å—è –æ–±—â–∞—é—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º —á–µ—Ä–µ–∑ –∫–æ—Ä–Ω–∏!"
        ]
        return f"ü§ì –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:\n{random.choice(facts)}"

    def get_motivational_quote(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É."""
        quotes = [
            "üí™ ¬´–£—Å–ø–µ—Ö - —ç—Ç–æ –Ω–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ, –Ω–µ—É–¥–∞—á–∞ - –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–∞: —Å–º–µ–ª–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å - –≤–æ—Ç —á—Ç–æ –≤–∞–∂–Ω–æ!¬ª",
            "üöÄ ¬´–í–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ –Ω–∞ —á—É–∂—É—é –∂–∏–∑–Ω—å.¬ª",
            "üåü ¬´–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É - –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.¬ª",
            "üí° ¬´–í–µ—Ä—å, —á—Ç–æ –º–æ–∂–µ—à—å, –∏ —Ç—ã —É–∂–µ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏.¬ª",
            "üéØ ¬´–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞–Ω–∏–π.¬ª",
            "üî• ¬´–ù–µ –±–æ–π—Å—è –æ—Ç–∫–∞–∑–æ–≤. –ö–∞–∂–¥—ã–π –æ—Ç–∫–∞–∑ - —ç—Ç–æ —à–∞–≥ –±–ª–∏–∂–µ –∫ —É—Å–ø–µ—Ö—É.¬ª",
            "‚ö° ¬´–î–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –Ω–µ —Ö–æ—Ç—è—Ç, –∑–∞–≤—Ç—Ä–∞ –∂–∏–≤–∏ —Ç–∞–∫, –∫–∞–∫ –¥—Ä—É–≥–∏–µ –Ω–µ –º–æ–≥—É—Ç.¬ª",
            "üåà ¬´–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.¬ª",
            "üíé ¬´–¢–≤–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–µ–ª - —Ç—ã —Å–∞–º.¬ª",
            "üé® ¬´–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ - —ç—Ç–æ —É–º–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω—è—Ç—å –Ω–µ—Å–æ–µ–¥–∏–Ω–∏–º–æ–µ.¬ª"
        ]
        return random.choice(quotes)

    def get_random_joke(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É."""
        jokes = [
            "ü§£ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ?\n–ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 = Dec 25!",
            "üòÑ –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∂–µ–Ω–µ?\n¬´–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–±—è:\n1. –¢—ã —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è.\n2. –£—Å—Ç–∞–Ω–æ–≤–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.¬ª",
            "üòÇ –ü–æ—á–µ–º—É JavaScript —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ–≥–¥–∞ –Ω–æ—Å—è—Ç –æ—á–∫–∏?\n–ü–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –Ω–∏—Ö –æ–Ω–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–¥—è—Ç!",
            "üòÜ –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è —Ç–∏—Ö–∞—è –∫–æ–º–Ω–∞—Ç–∞?\n–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞. –®-—à-—à!",
            "ü§™ –ü–æ—á–µ–º—É –∫—É—Ä–∏—Ü–∞ –ø–µ—Ä–µ—à–ª–∞ –¥–æ—Ä–æ–≥—É?\n–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É!",
            "üòú –ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –∏ –ø–æ—ç—Ç–æ–º?\n–û–±–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ä–∏—Ñ–º–∞–º–∏... –∫–æ–¥ –∏ —Å—Ç–∏—Ö–∏!",
            "ü§≠ –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–∞—à–∏–Ω–∞?\n–ú–µ—Ä—Å–µ–¥–µ—Å –ë–µ–Ω—Ü, –∫–æ–Ω–µ—á–Ω–æ!",
            "üòù –ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—à–µ–ª –∫ –≤—Ä–∞—á—É?\n–£ –Ω–µ–≥–æ –±—ã–ª –≤–∏—Ä—É—Å!",
            "ü§ó –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —á–∞–π–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É?\n¬´–ó–∞–≤–∞—Ä–∏-–∫–∞ –∫–æ–¥!¬ª",
            "üòé –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç–µ–º–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã?\n–ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –º–µ–Ω—å—à–µ –±–∞–≥–æ–≤!"
        ]
        return random.choice(jokes)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
calculator = Calculator()
translator = Translator()
weather_service = WeatherService()
game_service = GameService()
fun_service = FunService()
