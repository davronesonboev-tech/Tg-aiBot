"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä (–∫–Ω–æ–ø–æ–∫) –≤ Telegram –±–æ—Ç–µ.
"""

from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from personas import persona_manager, PersonaType


class KeyboardManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –±–æ—Ç–∞."""

    @staticmethod
    def get_main_menu(is_admin: bool = False) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
        builder = InlineKeyboardBuilder()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        builder.button(text="üé≠ –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è", callback_data="menu_personas")
        builder.button(text="üéÆ –ò–≥—Ä—ã", callback_data="menu_games")
        builder.button(text="üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="menu_tools")

        # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        builder.button(text="üß† –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="clear_memory")
        builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")

        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        if is_admin:
            builder.button(text="üëë –ê–¥–º–∏–Ω", callback_data="admin_panel")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É 2x2 –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –∑–∞—Ç–µ–º 3x3 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        if is_admin:
            builder.adjust(2, 3, 1)
        else:
            builder.adjust(2, 3, 1)

        return builder.as_markup()

    @staticmethod
    def get_personas_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è."""
        builder = InlineKeyboardBuilder()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω—ã
        personas = persona_manager.get_all_personas()

        for persona_type, persona in personas.items():
            emoji_map = {
                PersonaType.FRIENDLY: "ü§ó",
                PersonaType.PROGRAMMER: "üíª",
                PersonaType.EXPERT: "üéì",
                PersonaType.CREATIVE: "üé®",
                PersonaType.PROFESSIONAL: "üíº"
            }

            emoji = emoji_map.get(persona_type, "üé≠")
            builder.button(
                text=f"{emoji} {persona.name}",
                callback_data=f"persona_{persona_type.value}"
            )

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

        builder.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

        return builder.as_markup()

    @staticmethod
    def get_games_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –∏–≥—Ä."""
        builder = InlineKeyboardBuilder()

        builder.button(text="ü™® –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞", callback_data="game_rps")
        builder.button(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="game_dice")
        builder.button(text="üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess")
        builder.button(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_quiz")
        builder.button(text="üé± –í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä", callback_data="game_ball")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

        builder.adjust(1)

        return builder.as_markup()

    @staticmethod
    def get_rps_choice_menu() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞."""
        builder = InlineKeyboardBuilder()

        builder.button(text="ü™® –ö–∞–º–µ–Ω—å", callback_data="rps_rock")
        builder.button(text="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_scissors")
        builder.button(text="üìÑ –ë—É–º–∞–≥–∞", callback_data="rps_paper")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã", callback_data="menu_games")

        builder.adjust(3, 1)
        return builder.as_markup()

    @staticmethod
    def get_quiz_answers_menu(options: List[str], total_questions: int = 10, used_hints: int = 0) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
        builder = InlineKeyboardBuilder()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        max_hints = max(0, (total_questions - 5) // 5)
        remaining_hints = max(0, max_hints - used_hints)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏
        for i, option in enumerate(options):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—É + –Ω–∞—á–∞–ª–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤)
            short_option = option[:25] + "..." if len(option) > 25 else option
            button_text = f"{i+1}. {short_option}"
            builder.button(text=button_text, callback_data=f"quiz_answer_{i+1}")

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        if max_hints > 0:
            hint_text = f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ ({remaining_hints}/{max_hints})"
            builder.button(text=hint_text, callback_data="quiz_hint")
        else:
            builder.button(text="‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", callback_data="quiz_hint_disabled")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã", callback_data="menu_games")

        builder.adjust(1, 1, 1, 1, 2)  # 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ + –ø–æ–¥—Å–∫–∞–∑–∫–∞ + –Ω–∞–∑–∞–¥

        return builder.as_markup()

    @staticmethod
    def get_quiz_settings_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üéØ –í—ã–±—Ä–∞—Ç—å –æ—Ç—Ä–∞—Å–ª—å", callback_data="quiz_select_industry")
        builder.button(text="üî¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="quiz_select_count")
        builder.button(text="üéÆ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="quiz_start")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã", callback_data="menu_games")

        builder.adjust(1, 1, 1, 1)
        return builder.as_markup()

    @staticmethod
    def get_quiz_industry_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
        builder = InlineKeyboardBuilder()

        industries = [
            ("üß¨ –ë–∏–æ–ª–æ–≥–∏—è", "quiz_industry_–±–∏–æ–ª–æ–≥–∏—è"),
            ("‚öóÔ∏è –•–∏–º–∏—è", "quiz_industry_—Ö–∏–º–∏—è"),
            ("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "quiz_industry_–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
            ("‚ö° –§–∏–∑–∏–∫–∞", "quiz_industry_—Ñ–∏–∑–∏–∫–∞"),
            ("üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "quiz_industry_–≥–µ–æ–≥—Ä–∞—Ñ–∏—è"),
            ("üìú –ò—Å—Ç–æ—Ä–∏—è", "quiz_industry_–∏—Å—Ç–æ—Ä–∏—è"),
            ("üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ", "quiz_industry_–∏—Å–∫—É—Å—Å—Ç–≤–æ"),
            ("‚öΩ –°–ø–æ—Ä—Ç", "quiz_industry_—Å–ø–æ—Ä—Ç"),
            ("üé¨ –ö–∏–Ω–æ", "quiz_industry_–∫–∏–Ω–æ"),
            ("üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "quiz_industry_–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"),
            ("üéµ –ú—É–∑—ã–∫–∞", "quiz_industry_–º—É–∑—ã–∫–∞"),
            ("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "quiz_industry_–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è"),
            ("üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞", "quiz_industry_—ç–∫–æ–Ω–æ–º–∏–∫–∞"),
            ("üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "quiz_industry_–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("ü§ñ –ò–ò", "quiz_industry_–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"),
            ("üîí –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "quiz_industry_–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"),
            ("ü©∫ –ú–µ–¥–∏—Ü–∏–Ω–∞", "quiz_industry_–º–µ–¥–∏—Ü–∏–Ω–∞"),
            ("üåå –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "quiz_industry_–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è")
        ]

        for text, callback_data in industries:
            builder.button(text=text, callback_data=callback_data)

        builder.button(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å", callback_data="quiz_industry_—Å–ª—É—á–∞–π–Ω–∞—è")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="quiz_settings")

        builder.adjust(2)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
        return builder.as_markup()

    @staticmethod
    def get_quiz_count_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üî∏ 5 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="quiz_count_5")
        builder.button(text="üîπ 10 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="quiz_count_10")
        builder.button(text="üî∏ 15 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="quiz_count_15")
        builder.button(text="üîπ 20 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="quiz_count_20")
        builder.button(text="üî∏ 25 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="quiz_count_25")
        builder.button(text="üîπ 30 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="quiz_count_30")
        builder.button(text="‚úèÔ∏è –°–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="quiz_count_custom")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="quiz_settings")

        builder.adjust(2, 2, 2, 2, 2, 2, 1, 1)
        return builder.as_markup()

    @staticmethod
    def get_quiz_progress_menu(correct: int, total: int, time_left: int = 0) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
        builder = InlineKeyboardBuilder()

        progress_text = f"üìä {correct}/{total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö"
        builder.button(text=progress_text, callback_data="quiz_progress")

        if time_left > 0:
            time_text = f"‚è∞ {time_left} —Å–µ–∫"
            builder.button(text=time_text, callback_data="quiz_time")

        builder.button(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="quiz_finish")
        builder.button(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏", callback_data="menu_games")

        builder.adjust(2, 1, 1)
        return builder.as_markup()

    @staticmethod
    def get_tools_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="tool_calc")
        builder.button(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data="tool_weather")
        builder.button(text="üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", callback_data="tool_translate")
        builder.button(text="ü§£ –®—É—Ç–∫–∞", callback_data="fun_joke")
        builder.button(text="üí° –¶–∏—Ç–∞—Ç–∞", callback_data="fun_quote")
        builder.button(text="ü§ì –§–∞–∫—Ç", callback_data="fun_fact")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

        builder.adjust(2)

        return builder.as_markup()

    @staticmethod
    def get_dice_bet_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üéØ –ù–∏–∑–∫–∞—è —Å—Ç–∞–≤–∫–∞", callback_data="dice_low")
        builder.button(text="üé≤ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞", callback_data="dice_medium")
        builder.button(text="üíé –í—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞", callback_data="dice_high")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")

        builder.adjust(1)

        return builder.as_markup()

    @staticmethod
    def get_guess_difficulty_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–≥—Ä—ã —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üê£ –õ–µ–≥–∫–æ (1-10)", callback_data="guess_easy")
        builder.button(text="üéØ –°—Ä–µ–¥–Ω–µ (1-100)", callback_data="guess_medium")
        builder.button(text="üî• –°–ª–æ–∂–Ω–æ (1-1000)", callback_data="guess_hard")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")

        builder.adjust(1)

        return builder.as_markup()

    @staticmethod
    def get_rps_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞."""
        builder = InlineKeyboardBuilder()

        builder.button(text="ü™® –ö–∞–º–µ–Ω—å", callback_data="rps_–∫–∞–º–µ–Ω—å")
        builder.button(text="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_–Ω–æ–∂–Ω–∏—Ü—ã")
        builder.button(text="üìÑ –ë—É–º–∞–≥–∞", callback_data="rps_–±—É–º–∞–≥–∞")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")

        builder.adjust(3, 1)  # 3 –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∑–∞–¥

        return builder.as_markup()

    @staticmethod
    def get_calc_menu() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
        builder = InlineKeyboardBuilder()

        # –¶–∏—Ñ—Ä—ã
        for i in range(7, 10):
            builder.button(text=str(i), callback_data=f"calc_{i}")
        builder.button(text="‚ûó", callback_data="calc_/")

        for i in range(4, 7):
            builder.button(text=str(i), callback_data=f"calc_{i}")
        builder.button(text="‚úñÔ∏è", callback_data="calc_*")

        for i in range(1, 4):
            builder.button(text=str(i), callback_data=f"calc_{i}")
        builder.button(text="‚ûñ", callback_data="calc_-")

        builder.button(text="0", callback_data="calc_0")
        builder.button(text=".", callback_data="calc_.")
        builder.button(text="=", callback_data="calc_=")
        builder.button(text="‚ûï", callback_data="calc_+")

        builder.button(text="‚¨ÖÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="calc_clear")
        builder.button(text="‚úÖ –í—ã—á–∏—Å–ª–∏—Ç—å", callback_data="calc_calculate")

        builder.adjust(4, 4, 4, 2)

        return builder.as_markup()

    @staticmethod
    def get_uzbekistan_weather_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–µ–π –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã."""
        builder = InlineKeyboardBuilder()

        # –û–±–ª–∞—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
        regions = [
            ("üèõÔ∏è –¢–∞—à–∫–µ–Ω—Ç", "weather_tashkent"),
            ("üåæ –ê–Ω–¥–∏–∂–∞–Ω", "weather_andijan"),
            ("üè∫ –ë—É—Ö–∞—Ä–∞", "weather_bukhara"),
            ("üåæ –î–∂–∏–∑–∞–∫", "weather_jizzakh"),
            ("üèúÔ∏è –ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω", "weather_karakalpakstan"),
            ("üåæ –ö–∞—à–∫–∞–¥–∞—Ä—å—è", "weather_kashkadarya"),
            ("üè≠ –ù–∞–º–∞–Ω–≥–∞–Ω", "weather_namangan"),
            ("‚õèÔ∏è –ù–∞–≤–æ–∏", "weather_navoi"),
            ("üè∫ –°–∞–º–∞—Ä–∫–∞–Ω–¥", "weather_samarkand"),
            ("üåæ –°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å—è", "weather_surkhondarya"),
            ("üåæ –°—ã—Ä–¥–∞—Ä—å—è", "weather_syrdarya"),
            ("üåæ –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª.", "weather_tashkent_region"),
            ("üåæ –§–µ—Ä–≥–∞–Ω–∞", "weather_fergana"),
            ("üè∫ –•–æ—Ä–µ–∑–º", "weather_khorezm")
        ]

        for region_name, callback_data in regions:
            builder.button(text=region_name, callback_data=callback_data)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_tools")

        builder.adjust(2)  # 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–µ–π
        return builder.as_markup()

    @staticmethod
    def get_translation_languages_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."""
        builder = InlineKeyboardBuilder()

        # –Ø–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        languages = [
            ("üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π", "lang_uz"),
            ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru"),
            ("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "lang_en"),
            ("üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", "lang_es"),
            ("üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "lang_fr"),
            ("üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π", "lang_de"),
            ("üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "lang_it"),
            ("üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π", "lang_pt"),
            ("üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π", "lang_zh"),
            ("üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π", "lang_ja"),
            ("üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π", "lang_ko")
        ]

        for lang_name, callback_data in languages:
            builder.button(text=lang_name, callback_data=callback_data)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_tools")

        builder.adjust(3, 3, 3, 2)  # 3 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —è–∑—ã–∫–æ–≤
        return builder.as_markup()

    @staticmethod
    def get_menu_button() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üè† –ú–µ–Ω—é", callback_data="show_main_menu")

        return builder.as_markup()

    @staticmethod
    def get_admin_menu() -> InlineKeyboardMarkup:
        """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        builder.button(text="üîç –ü–æ–∏—Å–∫", callback_data="admin_search")
        builder.button(text="üö´ –ë–∞–Ω—ã", callback_data="admin_bans")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

        builder.adjust(2, 2, 1)
        return builder.as_markup()

    @staticmethod
    def get_admin_users_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")
        builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ", callback_data="admin_clear_user")
        builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö", callback_data="admin_clear_all")
        builder.button(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin_ban_user")
        builder.button(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin_unban_user")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_main")

        builder.adjust(2, 2, 1)
        return builder.as_markup()

    @staticmethod
    def get_admin_stats_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_general")
        builder.button(text="üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä", callback_data="admin_stats_games")
        builder.button(text="üí¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_stats_messages")
        builder.button(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç—Ä–µ–Ω–¥—ã", callback_data="admin_stats_charts")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_main")

        builder.adjust(1, 1, 1, 1, 1)
        return builder.as_markup()

    @staticmethod
    def get_admin_search_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        builder = InlineKeyboardBuilder()

        builder.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="admin_search_id")
        builder.button(text="üë§ –ü–æ–∏—Å–∫ –ø–æ username", callback_data="admin_search_username")
        builder.button(text="üìù –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", callback_data="admin_search_name")
        builder.button(text="üìä –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="admin_top_users")

        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_main")

        builder.adjust(2, 2, 1)
        return builder.as_markup()

    @staticmethod
    def get_confirmation_menu(action: str, callback_data: str) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""
        builder = InlineKeyboardBuilder()

        action_text = {
            "clear_memory": "–æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å",
            "reset_settings": "—Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        }.get(action, action)

        builder.button(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {action_text}", callback_data=callback_data)
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")

        builder.adjust(1)

        return builder.as_markup()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboard_manager = KeyboardManager()
